/**
 * Author: Martin <lmccc.dev@gmail.com>  
 * Co-Author: AI Assistant (Claude)
 * Description: This code was collaboratively developed by Martin and AI Assistant.
 */

import { BROWSER_KEYS } from '../../keys.js';

// 浏览器相关消息 (Browser related messages)
export const browser = {
  [BROWSER_KEYS.closing]: "Closing browser...",
  [BROWSER_KEYS.closed]: "Browser closed",
  [BROWSER_KEYS.starting]: "Starting new browser instance",
  [BROWSER_KEYS.startingFailed]: "Browser startup failed: {{error}}",
  [BROWSER_KEYS.alreadyRunning]: "Browser is starting, waiting...",
  [BROWSER_KEYS.creatingPage]: "Browser started successfully",
  [BROWSER_KEYS.navigatingTo]: "Navigating to URL...",
  [BROWSER_KEYS.waitingForSelector]: "Waiting for selector: {{selector}}",
  [BROWSER_KEYS.waitingForTimeout]: "Waiting for timeout: {{timeout}}",
  [BROWSER_KEYS.scrollingToBottom]: "Auto-scrolling page...",
  [BROWSER_KEYS.gettingContent]: "Getting page content...",
  [BROWSER_KEYS.savingCookies]: "Saving cookies...",
  [BROWSER_KEYS.contentLength]: "Content length: {{length}}",
  [BROWSER_KEYS.cookiesSaved]: "Cookies saved",
  [BROWSER_KEYS.cookiesLoaded]: "Cookies loaded",
  [BROWSER_KEYS.noCookiesFound]: "No cookies found",
  [BROWSER_KEYS.errorLoadingCookies]: "Error loading cookies: {{error}}",
  [BROWSER_KEYS.errorSavingCookies]: "Error saving cookies: {{error}}",
  [BROWSER_KEYS.errorNavigating]: "Error navigating: {{error}}",
  [BROWSER_KEYS.errorGettingContent]: "Error in browser fetch: {{error}}",
  [BROWSER_KEYS.errorClosingBrowser]: "Error closing browser: {{error}}",
  [BROWSER_KEYS.errorCreatingPage]: "Error creating page: {{error}}",
  
  // 额外的键（不在 BROWSER_KEYS 中定义的）
  "waiting": "Browser is starting, waiting...",
  "startupSuccess": "Browser started successfully",
  "navigating": "Navigating to URL...",
  "scrolling": "Auto-scrolling page...",
  "scrollCompleted": "Auto-scroll completed",
  "contentTruncated": "Content too large, truncating...",
  "pageClosed": "Page closed",
  "fetchError": "Error in browser fetch: {{error}}",
  "highMemory": "High memory usage detected, attempting to free resources...",
  "closingDueToMemory": "Closing browser due to high memory usage...",
  "forcingGC": "Forcing garbage collection...",
  "memoryCheckError": "Error checking memory usage: {{error}}",
  "usingCookies": "Using stored cookies for domain: {{domain}}",
  "usingProxy": "Using proxy: {{proxy}}",
  "checkingCloudflare": "Checking for Cloudflare protection...",
  "cloudflareDetected": "Cloudflare protection detected, attempting to bypass...",
  "simulatingHuman": "Simulating human behavior...",
  "simulatingHumanError": "Error simulating human behavior: {{error}}",
  "stillOnCloudflare": "Still on Cloudflare protection page, trying to refresh...",
  "bypassFailed": "Failed to bypass Cloudflare protection",
  "cloudflareError": "Error handling Cloudflare protection: {{error}}",
  "continuingWithoutBypass": "Unable to bypass Cloudflare protection, continuing to try to get content...",
  "fetchingWithRetry": "Fetching HTML with browser (attempt {{attempt}}/{{maxAttempts}}): {{url}}",
  "memoryUsage": "Memory usage - Heap: {{heapUsed}}MB/{{heapTotal}}MB, RSS: {{rss}}MB",
  "memoryTooHigh": "Memory usage too high - Heap: {{heapUsed}}MB/{{heapTotal}}MB, RSS: {{rss}}MB",
  "unableToBypassCloudflare": "Unable to bypass Cloudflare protection, continuing to try to get content...",
  "contentTooLarge": "Content too large, truncating...",
  "failedToParseJSON": "Failed to parse JSON: {{error}}",
  "startingBrowserFetchForMarkdown": "Starting browser fetch for Markdown: {{url}}",
  "errorInBrowserFetchForMarkdown": "Error in browser fetch for Markdown: {{error}}",
  "fetchRequest": "Browser fetch request: {{url}}",
  "usingStoredCookies": "Using stored cookies for domain: {{domain}}",
  "closingInstance": "Closing browser instance",
  "fetchErrorWithAttempt": "Error in browser fetch (attempt {{attempt}}/{{maxAttempts}}): {{error}}",
  "retryingAfterDelay": "Retrying after {{delayMs}}ms delay...",
  "browserStartupSuccess": "Browser started successfully",
  "browserStartupFailed": "Browser startup failed: {{error}}",
  "usingCustomChromePath": "Using custom Chrome path: {{path}}",
  "browserDisconnected": "Browser disconnected",
  "waitingForBrowserStart": "Waiting for browser to start",
  "reusingExistingBrowser": "Reusing existing browser instance",
  "startingBrowser": "Starting browser",
  "browserStarted": "Browser started successfully",
  "browserStartError": "Browser startup error: {{error}}"
}; 